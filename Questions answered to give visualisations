actor use sakila;
-- Use basic queries to explore the tables before jumping into exercises 
select *
from actor;

select *
from film;

-- use reverse engineer to view the schema design

/* 1) Display the first and last names of all actors from the table actor*/
SELECT first_name, last_name FROM actor;

/* 2) You need to find the ID number, first name, and last name of an actor, of whom you know only the first name, “Joe.” 
What is one query would you use to obtain this information? */
-- Where query;
SELECT actor_id, first_name, last_name FROM actor WHERE first_name = 'Joe';

/* 3) Select specific columns from the films table that last 3 hours or longer. */    
select title, length from film where length >= 180;

/* 4) Select all columns from the customer table for rows that have a last name beginning with "S" and a first name ending with "N". */
select* FROM customer where last_name like 'S%' and first_name like '%N';
    
/* 5) Select specific columns from the payments table for payments made on or after 05/27/2005. */
SELECT payment_id, payment_date FROM payment WHERE payment_date >= '2005-05-27';
    
/* 6) Using IN, display the country_id and country columns of the following countries: Afghanistan, Bangladesh, and China: */
select country_id, country from  country where country in('Afghanistan','Bangladesh', 'China');

/* 7) Find all actors whose last name contain the letters GEN */
select* FROM actor where last_name like '%GEN%';

/* 8) Find all actors whose last names contain the letters LI. This time, 
order the rows by last name and first name, in that order: */
select* FROM actor where last_name like '%LI%' ORDER BY last_name ASC, first_name ASC;
    
/* 9) Which actors have the first name ‘Scarlett’ */
SELECT actor_id, first_name, last_name FROM actor WHERE first_name = 'Scarlett';

/* 10) Which actors have the last name ‘Johansson’ */
SELECT actor_id, first_name, last_name FROM actor WHERE last_name = 'Johansson';

/* 11) Select the following columns from the film table for rows where the description ends with the word "Boat"
and rental duration greater than 6. Title, Description, Rental Duration */
select title, description, rental_duration FROM film where description like '%__boat' and rental_duration > 6;

/* 12) How many distinct actors last names are there? */
select COUNT(DISTINCT last_name) AS DistinctLastNames from actor;

/* 13) When is ‘Academy Dinosaur’ due? */
select title, rental_duration from film where title = "Academy Dinosaur";

/* 14) What is that average running time of all the films in the sakila DB? */
select avg(length) from film;

/* 15- Use `INNER JOIN` to display the first and last names, as well as the address, of each staff member. 
Use the tables `staff` and `address` */
select first_name,last_name,address from staff inner join address on staff.address_id = address.address_id;
  
/* 16- Use `INNER JOIN` to display first name, last name and the amount for each staff member. 
Use tables `staff` and `payment*/
select first_name,last_name,amount from staff inner join payment on staff.staff_id = payment.staff_id;

/* 17- Use `INNER JOIN` to display first name, last name,  payment date and 
the amount for each staff member in  August of 2005. Use tables `staff` and `payment*/
select first_name,last_name,payment_date,amount from staff inner join payment on staff.staff_id = payment.staff_id WHERE payment.payment_date BETWEEN '2005-08-01' AND '2005-08-31';

/* 18- Use `INNER JOIN` to display the total amount rung up by each staff member in August of 2005. 
Use tables `staff` and `payment`. */
SELECT first_name,last_name,SUM(payment.amount) AS TotalAmountRungUp from staff inner join payment on staff.staff_id = payment.staff_id WHERE payment.payment_date BETWEEN '2005-08-01' AND '2005-08-31' GROUP BY staff.first_name, staff.last_name ORDER BY TotalAmountRungUp DESC;

/* 19) List each film and the number of actors who are listed for that film. Use tables `film_actor` and `film`. 
Use inner join, group by. */
select title, COUNT(actor_id) AS NumberOfActors from film inner join film_actor on film.film_id = film_actor.film_id GROUP BY film.title ORDER BY NumberOfActors DESC;

/* 20) How many copies of the film `Hunchback Impossible` exist in the inventory system? 
Use tables `film` and `inventory`*/
select title, count(inventory_id) as NumberOfCopies from film inner join inventory on film.film_id = inventory.film_id where title ='Hunchback Impossible'group by film.title;

/* 21) Using the tables `payment` and `customer` and the `INNER JOIN` command, list payments by each customer. 
List the customers alphabetically by last name */
select first_name, last_name, amount from customer inner join payment on customer.customer_id = payment.customer_id order by last_name asc;

/* 22) Using the tables `payment` and `customer` and the `INNER JOIN` command, list the total paid by each customer. 
List the customers alphabetically by last name. */
select first_name, last_name, sum(payment.amount) as totalPaid from customer inner join payment on customer.customer_id = payment.customer_id GROUP BY customer.last_name, customer.first_name order by last_name asc;

/* 23) Which actor has appeared in the most films? */
select first_name, last_name, count(film_actor.actor_id) as movie_appearences from actor inner join film_actor on actor.actor_id = film_actor.actor_id GROUP BY actor.actor_id, actor.first_name, actor.last_name ORDER BY movie_appearences DESC LIMIT 1;;

/* 24) Find the most common actor surname from the Sakila database */
SELECT last_name, COUNT(*) AS SurnameFrequency FROM actor GROUP BY last_name ORDER BY SurnameFrequency DESC LIMIT 1;

/* 25) List the last names of actors, as well as how many actors have that last name.*/
SELECT last_name, COUNT(*) AS SurnameFrequency FROM actor GROUP BY last_name ORDER BY SurnameFrequency DESC;

/* 26) Which last names are not repeated? (Please search for having clause for this exercises) */
SELECT last_name FROM actor GROUP BY last_name HAVING COUNT(*) = 1;

/* 27) Which last names appear more than once? (Please search for having clause for this exercises) */
SELECT last_name FROM actor GROUP BY last_name HAVING COUNT(*) > 1;
